package com.example.iniciao_cientfica.AI;

import android.util.Log;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class IA {

    public static NeuralNetwork neural;
    public static ArrayList<String> lista;

    public static void initIA(int inputNodes, int hiddenNodes, int outputNodes){
        lista = new ArrayList<>();
        neural = new NeuralNetwork(inputNodes,hiddenNodes,outputNodes);
    }

    public static void train(){
        double error = 1;
        int cont = 0;
        while(error > 0.2 && cont < 50){
            error = Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,1,0,2.5,3.0,5.0,0.0,0.0,0.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,0,1,3.5,1.0,0.0,3.0,1.0,2.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,1,0,1.5,-1.0,0.0,0.0,4.0,1.2,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.25, 0.25, 0.25, 0.75, 0.25, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,1.5,5.0,1.0,4.0,3.0,2.6,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,1,0,0,1.5,4.0,7.0,2.0,1.0,3.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.25, 0.25, 0.25, 0.25, 0.75, 0.25, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,0.5,9.0,5.0,7.0,8.0,5.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.75, 0.75, 0.25, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,1.0,7.0,9.0,3.0,4.0,6.1,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.25, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,1,0,0,0,0,0,1,0,0,0,2.0,2.0,1.0,2.0,1.5,9.3,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.75, 0.25, 0.75, 0.25, 0.25, 0.75, 0.75, 0.25, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,1,0,0,0,0,1,0,0,0,0,0,1.5,1.0,0.5,2.0,1.0,7.8,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.75, 0.25, 0.75, 0.75, 0.25, 0.75, 0.75, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,1,0,0,0,0,0,0,0,0,0,0,1,3.5,-3.0,0.0,0.0,1.0,-0.8,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,1,0,0,0,0,0,0,0,0,1,0,0,0.5,0.0,0.0,0.0,0.0,-1.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{1,0,0,0,0,0,0,0,0,0,0,1,0,1.5,2.0,2.0,3.0,1.0,0.1,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{1,0,0,0,0,0,0,0,0,1,0,0,0,1.0,4.0,0.0,5.0,6.0,0.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,1,0,0,0.5,6.0,7.0,8.0,4.0,3.1,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,2.0,5.0,1.0,3.0,2.5,2.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,1,0,0,0,0,0,0,1,0,0,1.5,4.0,7.0,3.0,1.5,4.2,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,2.5,3.0,2.0,3.0,2.5,5.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,1.0,2.0,1.0,2.5,4.0,2.6,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,0.5,4.0,7.0,2.0,3.5,3.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,1.5,5.0,7.0,3.0,4.0,4.2,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,1,0,0,0,0,0,0,1,0,0,0.5,9.0,5.0,6.0,4.5,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,1,0,0,0,0,0,0,1,0,0,0,2.0,2.0,1.0,3.0,2.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,1,0,0,0,0,0,0,0,0,0,0,1,3.0,-1.0,0.0,0.0,1.0,-1.2,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,1,0,0,0,0,0,0,0,0,1,0,0,0.5,2.0,1.0,0.0,2.0,-1.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{1,0,0,0,0,0,0,0,0,0,0,1,0,1.5,3.0,2.0,4.0,1.0,0.2,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{1,0,0,0,0,0,0,0,0,1,0,0,0,1.0,4.0,0.0,5.0,6.0,1.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,1,0,0,1.5,3.0,2.0,4.0,2.0,4.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,2.5,4.0,2.0,3.5,3.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,0.5,5.0,6.0,2.0,4.0,5.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,1.5,4.0,7.0,3.0,2.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,1,0,2.0,3.5,5.0,1.0,2.0,4.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,0,1,1.5,2.5,1.0,3.0,2.0,3.6,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,2.5,3.0,2.0,4.0,2.5,4.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,2.0,4.0,1.0,3.5,3.0,5.2,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,0.5,5.0,6.0,2.0,4.0,4.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,1.5,6.0,7.0,3.0,2.5,5.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,1,0,0,0,0,0,0,1,0,0,0.5,4.0,5.0,2.0,3.5,4.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,1,0,0,0,0,0,0,1,0,0,0,2.0,3.0,1.0,3.0,2.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,1,0,0,0,0,0,0,0,0,0,0,1,3.5,-2.0,0.0,0.0,1.0,-1.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,1,0,0,0,0,0,0,0,0,1,0,0,0.5,1.0,1.0,2.0,3.0,-1.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{1,0,0,0,0,0,0,0,0,0,0,1,0,1.5,2.0,2.0,4.0,1.5,0.1,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{1,0,0,0,0,0,0,0,0,1,0,0,0,1.0,4.0,0.0,6.0,4.0,1.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,1,0,0,1.5,2.0,1.0,3.0,2.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,2.5,3.0,1.0,3.5,3.0,7.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,0.5,4.0,6.0,2.0,4.5,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,1.5,5.0,7.0,3.0,4.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,1,0,2.0,3.0,2.5,3.5,2.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,0,1,0,0,0,0,0,1,2.5,4.0,3.0,2.5,3.5,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,0,1,0,0,0,0,0,1,0,1.5,2.5,1.0,3.5,2.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.0,4.0,2.0,2.5,3.0,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.5,5.0,3.0,3.0,4.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.0,6.0,5.0,2.0,3.5,4.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.5,4.0,6.0,2.5,3.0,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.5,4.0,5.0,3.0,2.5,5.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.0,5.0,2.0,3.0,3.0,4.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,0.5,3.0,7.0,2.5,3.5,5.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,2.0,6.0,4.0,3.0,4.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,1.5,5.0,7.0,3.0,4.5,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.0,6.0,2.5,2.5,3.5,4.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.5,4.0,5.0,2.5,3.0,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.0,3.0,1.5,3.5,2.0,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,1,0,0,0,0,0,2.5,4.0,2.0,4.0,2.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.0,5.0,3.0,2.5,3.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.0,4.0,5.0,3.0,3.5,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.5,4.5,2.5,3.0,3.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.5,3.5,1.5,2.5,3.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.0,4.0,6.0,3.0,4.0,5.5,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,1.5,5.0,2.0,3.5,4.0,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.0,4.5,3.5,2.0,3.5,6.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            error += Math.abs(neural.train(new double[]{0,0,0,0,1,0,0,0,0,0,1,0,0,2.5,4.0,5.0,3.0,4.5,5.0,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1}, new double[]{0.25, 0.75, 0.75, 0.25, 0.25, 0.75, 0.25, 0.75, 0.75, 0.25}));
            cont++;
        }
    }

    public static void predict(){
        double[] saida = neural.predict(new double[]{0,0,0,0,0,0,1,0,0,0,0,1,0,2.5,3.0,5.0,0.0,0.0,0.4,1.2,0.1,0.7,-1.2,-0.3,0.1,-0.3,0.15,0.6,1,-1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1});
        lista.clear();
        if(saida[0] >= 0.5){
            lista.add("Cuidados Intensivos e Terapia Intensivo - Completo");
        }else{
            lista.add("");
        }
        if(saida[1] >= 0.5){
            lista.add("Cuidados Intensivos e Terapia Intensivo - Curto");
        }else{
            lista.add("");
        }
        if(saida[2] >= 0.5){
            lista.add("Gestão e Liderança de Pasciente - Completo");
        }else{
            lista.add("");
        }
        if(saida[3] >= 0.5){
            lista.add("Gestão e Liderança de Pasciente - Curto");
        }else{
            lista.add("");
        }
        if(saida[4] >= 0.5){
            lista.add("Qualidade e Segurança do Pasciente - Completo");
        }else{
            lista.add("");
        }
        if(saida[5] >= 0.5){
            lista.add("Qualidade e Segurança do Pasciente - Curso");
        }else{
            lista.add("");
        }
        if(saida[6] >= 0.5){
            lista.add("Cuidados Paliativos - Completo");
        }else{
            lista.add("");
        }
        if(saida[7] >= 0.5){
            lista.add("Cuidados Paliativos - Curso");
        }else{
            lista.add("");
        }
        if(saida[8] >= 0.5){
            lista.add("Procedimentos Minimamente Invasivos - Completo");
        }else{
            lista.add("");
        }
        if(saida[9] >= 0.5){
            lista.add("Procedimentos Minimamente Invasivos - Completo");
        }else{
            lista.add("");
        }
        Log.i("Claudio", String.valueOf(lista));
    }

}
